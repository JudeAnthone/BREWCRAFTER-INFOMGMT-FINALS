🌐 Order Flow Sequence
User Action → Frontend → Backend API → Database → Response

1. User Builds a Drink (Frontend)

jsx
// React Component State Example
const [customDrink, setCustomDrink] = useState({
  base: 'espresso',
  toppings: ['whipped-cream'],
  size: 'large',
  price: 4.25 // Calculated live
});


2. User Clicks "Place Order" (Frontend → API Call)

javascript
// Frontend API Service (services/api.js)
export const createOrder = async (orderData) => {
  const response = await fetch('/api/orders', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      // Include JWT token if logged in
      Authorization: `Bearer ${localStorage.getItem('token')}`
    },
    body: JSON.stringify({
      items: orderData.items,
      total: orderData.price,
      isGuest: !localStorage.getItem('token')
    })
  });
  return await response.json();
};



3. Request Hits Backend (Express Route)

javascript
// routes/orderRoutes.js
router.post('/', authenticateOptional, orderController.createOrder);



4. Backend Validation (Controller)

javascript
// controllers/orderController.js
const createOrder = async (req, res) => {
  try {
    // Validate request body
    const { items, total } = req.body;
    if (!items || !total) {
      return res.status(400).json({ error: 'Invalid order data' });
    }

    // Recalculate total to prevent hacking
    const validTotal = await calculateTotalPrice(items);
    if (Math.abs(validTotal - total) > 0.01) {
      return res.status(400).json({ error: 'Price mismatch' });
    }

    // Create order (next step)
    const order = await Order.create({
      userId: req.user?.id || null, // Guest orders have null
      total,
      items
    });

    res.status(201).json(order);
  } catch (error) {
    res.status(500).json({ error: 'Order failed' });
  }
};



5. Database Interaction (Model)

javascript
// models/Order.js
class Order {
  static async create(orderData) {
    const connection = await pool.getConnection();
    try {
      await connection.beginTransaction();

      // 1. Insert into orders table
      const [orderResult] = await connection.query(
        'INSERT INTO orders (user_id, total_price) VALUES (?, ?)',
        [orderData.userId, orderData.total]
      );

      // 2. Insert order items
      for (const item of orderData.items) {
        await connection.query(
          'INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)',
          [orderResult.insertId, item.id, item.quantity]
        );
      }

      await connection.commit();
      return { id: orderResult.insertId, ...orderData };
    } catch (error) {
      await connection.rollback();
      throw error;
    } finally {
      connection.release();
    }
  }
}




6. Database Updates

sql
-- orders table
+----+---------+-------------+---------------------+
| id | user_id | total_price | created_at          |
+----+---------+-------------+---------------------+
| 1  | NULL    | 4.25        | 2023-10-05 14:30:00 |
+----+---------+-------------+---------------------+

-- order_items table
+----------+------------+----------+
| order_id | product_id | quantity |
+----------+------------+----------+
| 1        | 1 (espresso) | 1       |
| 1        | 3 (whipped) | 1       |
+----------+------------+----------+




7. Response to Frontend

json
// Backend Response
{
  "id": 1,
  "total": 4.25,
  "status": "preparing",
  "estimatedWait": "5 minutes"
}




8. Frontend Order Confirmation

jsx
// React Component Handling Response
const handleOrderSubmit = async () => {
  try {
    const order = await createOrder(customDrink);
    setCurrentOrder(order); // Show tracking UI
    navigate(`/order-tracking/${order.id}`);
  } catch (error) {
    setError('Failed to place order');
  }
};




BUILDING THE frontend (CUSTOMER SIDE) and the admin-frontend (ADMIN SIDE)

__________________________________________________________________________________________
How the flow looks overall:

You design the Menu.jsx frontend.

Backend API (GET /api/menu) sends menu details (name, price, image_url).

Frontend Menu.jsx fetches the menu.

The img tag uses item.image_url to display the image.

Where will the menu details be stored later?
✅ Backend (Node.js + Express) will have an API route like:
GET /api/menu
✅ This API will fetch menu data from your MySQL database.

✅ Database (MySQL) will have a menu table like this:

id	name	price	image_url
1	Caramel Latte	120	/uploads/caramel-latte.jpg
2	Espresso	90	/uploads/espresso.jpg
3	Matcha Latte	130	/uploads/matcha-latte.jpg


__________________________________________________________________________________________


🖥️ 1. Frontend (Customer Side)
Folder: frontend/

Tech: React + JavaScript + Tailwind CSS

Purpose: For customers to order, build coffee, view menu, etc.

Current Status: No backend yet (you’re using dummy data for now).


🛡️ 2. Admin-Frontend (Admin Side)
Folder: admin-frontend/

Tech: React + TypeScript + Tailwind CSS

Purpose: For admins to login, manage products, view orders, view sales.

Current Status: Also no backend yet (you’ll mock/fake data if needed for now).


🛠️ 3. Backend (Server)
Folder: backend/

Tech: Node.js + Express + MySQL

Purpose:

Handle API routes (login, products, orders, etc.)

Connect to the MySQL database.

Secure your authentication (JWT tokens for admins/customers).

Current Status: You'll start this after your frontend/admin-frontend are ready for real data.


🔗 4. How It Connects

Frontend	Talks To	Backend
frontend/ (Customer Site)	→ API calls (axios)	backend/ (Node + Express)
admin-frontend/ (Admin Panel)	→ API calls (axios)	backend/ (Node + Express)


__________________________________________________________________________________________________________________________________________________________
BACK END PROCESS: 

🎯 1. Backend Setup and Build (Node.js + Express + MySQL)
✅ Initialize the backend

✅npm init -y to start a backend project.

✅Install needed packages (express, mysql2, cors, dotenv, bcrypt, jsonwebtoken, etc.)


✅Connect to your MySQL database
-Create a connection file to connect Node.js to MySQL (using mysql2 package).
-Build your database tables: Products, Users, Orders, Admins, etc.



✅Set up routes and controllers
Example:

-POST /api/login → login user/admin

-GET /api/products → get all products

-POST /api/orders → place an order

-PUT /api/admin/products/:id → update a product

-DELETE /api/admin/products/:id → delete a product



✅Authentication & Authorization
-Customers can login/signup.

-Admin login is stricter (maybe require a special role).

-JWT (JSON Web Tokens) to secure routes.

✅ Test your backend with tools like Postman
Make sure your API routes are working and sending the correct data (no frontend yet).



 2. Connect Frontend + Admin-Frontend to Backend
✅ Change your frontend to use real API calls instead of dummy data

Instead of using hardcoded dummy menu items, call the real API like:
const res = await axios.get('/api/products');
setProducts(res.data);

✅ Handle loading, errors, and success states properly.
Add spinners, "no data" messages, etc.

✅ Customer Side:
Login, View Menu, Craft Coffee, Add to Cart, login, Checkout → all real now through backend.

✅ Admin Side (NAKA DEPENDE PA KUNG ANO YUNG MAGIGING CONTENT NG ADMIN PANEL)
Admin Login, View Products, Add/Edit/Delete Products, View Orders, View Sales.

✅ Authentication Handling:
-Save JWT tokens in localStorage.
-Protect admin pages (can't access without token).


3. Full Final Touch: Deployment & Presentation
✅ Frontend + Admin-Frontend:
-WE can deploy the frontend and admin-frontend separately (ex: Vercel or Netlify).

✅ Backend:
-Deploy backend server (ex: Render, Railway, or even VPS).
-Or just run it locally if your school only requires local hosting.

✅ Database:
-Host MySQL database or run it locally (ex: XAMPP, MySQL Workbench, or online db hosting).


__________________________________________________________________________________________________________________________________________________________________
BACK END PROCESS: 

🌟 What to Do First After Frontend?
✅ Step 1: Design and Build Your Database First
Why?

Because the backend (Node.js) needs to know what it's working with —
tables, columns, data types — everything.

What to do:
Finalize your Database Schema
(example: users, products, orders, order_items, admins, etc.)

Create the tables manually in MySQL Workbench or with SQL scripts.

Insert some sample data for testing (like products for the Menu).



✅ Step 2: Start Coding the Backend
After your database is ready.

Backend focus:
Connect Node.js app → to MySQL database.

Set up Express server.

Create API routes for fetching/sending data.

Add Authentication (login/signup).

🌟 Is Backend = "Connecting Everything"?
✅ Exactly.
Backend is the bridge:

Frontend → sends request to → Backend (APIs) → talks to → Database (MySQL) → sends back the data.

🌟 What API Design Should You Use?
✅ Use REST API for your project.

Why REST?

Simple.

Easy to understand.

Very standard for full-stack apps.

Perfect for school projects and even real companies.

🎯 Example of REST API Design:

Feature	           HTTP Method	   API Endpoint	          Purpose

Get all products	    GET         	/api/products	          Customer can see menu

Get single product	  GET	          /api/products/:id	      View details of a coffee

Add new order	        POST	         /api/orders	Customer      checkout

User login	          POST	         /api/auth/login	Customer   login

Admin login    	      POST	       /api/admin/login	          Admin login

Add new product (Admin)	POST	    /api/admin/products	        Admin add coffee item

Edit product (Admin)	 PUT	        /api/admin/products/:id	  Admin edit coffee item

Delete product (Admin)	DELETE	  /api/admin/products/:id	  Admin delete coffee item



🛣️ Summary Plan
Phase	What You Do	Why
1	Finish Customer + Admin Frontend	UI ready
2	Build MySQL Database + Tables	Backend knows the data structure
3	Set up Node.js Backend + Connect DB	Backend foundation
4	Build REST APIs (CRUD)	Dynamic data handling
5	Connect Frontend to Backend	Real app working
6	Testing + Final fixes	Make sure it's bug-free


MENU: 

[
  // Existing
  {
    id: 1,
    name: "Caramel Latte",
    description: "Sweet espresso with caramel syrup and steamed milk.",
    price: 120,
    image: "https://images.unsplash.com/photo-1514432324607-a09d9b4aefdd?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "coffee",
  },
  {
    id: 2,
    name: "Vanilla Cold Brew",
    description: "Smooth cold brew coffee infused with vanilla flavor.",
    price: 110,
    image: "https://images.unsplash.com/photo-1578681326003-c293a15615f5?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "coffee",
  },
  {
    id: 3,
    name: "Mocha Espresso",
    description: "Rich espresso with chocolate and steamed milk.",
    price: 130,
    image: "https://images.unsplash.com/photo-1582202737800-8ab9a8012367?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "coffee",
  },
  {
    id: 4,
    name: "Classic Americano",
    description: "Espresso shots diluted with hot water for a rich flavor.",
    price: 100,
    image: "https://images.unsplash.com/photo-1551030173-122aabc4489c?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "coffee",
  },
  {
    id: 5,
    name: "Hazelnut Cappuccino",
    description: "Espresso with steamed milk, foam, and hazelnut syrup.",
    price: 135,
    image: "https://images.unsplash.com/photo-1534687941688-651ccaafbff8?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "coffee",
  },
  {
    id: 6,
    name: "Flat White",
    description: "Espresso with velvety steamed milk and microfoam.",
    price: 125,
    image: "https://images.unsplash.com/photo-1517701604599-bb29b565090c?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "coffee",
  },
  // New
  {
    id: 16,
    name: "Spanish Latte",
    description: "Espresso with sweetened condensed milk and steamed milk.",
    price: 140,
    image: "https://images.unsplash.com/photo-1504674900247-0877df9cc836?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "coffee",
  },
  {
    id: 17,
    name: "Macchiato",
    description: "Espresso topped with a dollop of foamed milk.",
    price: 115,
    image: "https://images.unsplash.com/photo-1464983953574-0892a716854b?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "coffee",
  },
  {
    id: 18,
    name: "Affogato",
    description: "Espresso poured over a scoop of vanilla ice cream.",
    price: 150,
    image: "https://images.unsplash.com/photo-1502741338009-cac2772e18bc?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "coffee",
  },
  {
    id: 19,
    name: "Irish Coffee",
    description: "Coffee with Irish whiskey, sugar, and cream.",
    price: 170,
    image: "https://images.unsplash.com/photo-1519864600265-abb23847ef2c?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "coffee",
  },
  {
    id: 20,
    name: "Café Mocha",
    description: "Espresso with chocolate syrup, steamed milk, and whipped cream.",
    price: 145,
    image: "https://images.unsplash.com/photo-1504674900247-ec6b0b1b798e?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "coffee",
  },
]

[
  // Existing
  {
    id: 7,
    name: "Matcha Frappe",
    description: "Creamy matcha green tea blended with ice and milk.",
    price: 140,
    image: "https://images.unsplash.com/photo-1644681584421-c8e5aea022f0?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "frappe",
  },
  {
    id: 8,
    name: "Caramel Frappe",
    description: "Coffee blended with ice, milk, and rich caramel sauce.",
    price: 145,
    image: "https://images.unsplash.com/photo-1529892485617-25f63cd7b1e9?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "frappe",
  },
  {
    id: 9,
    name: "Chocolate Chip Frappe",
    description: "Chocolate frappe loaded with chocolate chips and whipped cream.",
    price: 155,
    image: "https://images.unsplash.com/photo-1577805947697-89e18249d767?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "frappe",
  },
  {
    id: 10,
    name: "Oreo Cookie Frappe",
    description: "Vanilla base blended with crushed Oreo cookies and ice.",
    price: 160,
    image: "https://images.unsplash.com/photo-1572490122747-3968b75cc699?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "frappe",
  },
  // New
  {
    id: 21,
    name: "Mocha Frappe",
    description: "Coffee, chocolate, and ice blended to perfection.",
    price: 150,
    image: "https://images.unsplash.com/photo-1504674900247-ec6b0b1b798e?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "frappe",
  },
  {
    id: 22,
    name: "Java Chip Frappe",
    description: "Coffee blended with chocolate chips and topped with whipped cream.",
    price: 155,
    image: "https://images.unsplash.com/photo-1464306076886-debca5e8a6b0?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "frappe",
  },
  {
    id: 23,
    name: "White Chocolate Frappe",
    description: "White chocolate and coffee blended with ice and milk.",
    price: 160,
    image: "https://images.unsplash.com/photo-1504674900247-ec6b0b1b798e?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "frappe",
  },
  {
    id: 24,
    name: "Strawberry Frappe",
    description: "Strawberries blended with ice, milk, and a touch of sweetness.",
    price: 145,
    image: "https://images.unsplash.com/photo-1465101046530-73398c7f28ca?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "frappe",
  },
  {
    id: 25,
    name: "Salted Caramel Frappe",
    description: "Caramel frappe with a hint of sea salt, topped with whipped cream.",
    price: 155,
    image: "https://images.unsplash.com/photo-1504674900247-ec6b0b1b798e?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "frappe",
  },
]

[
  // Existing
  {
    id: 11,
    name: "Strawberry Smoothie",
    description: "Fresh strawberries blended with yogurt and ice.",
    price: 150,
    image: "https://images.unsplash.com/photo-1638176066298-2756703a89c4?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "smoothie",
  },
  {
    id: 12,
    name: "Mango Passion Smoothie",
    description: "Tropical blend of mangoes and passion fruit.",
    price: 155,
    image: "https://images.unsplash.com/photo-1623065422902-30a2d299bbe4?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "smoothie",
  },
  {
    id: 13,
    name: "Berry Blast Smoothie",
    description: "Mixed berries with Greek yogurt and honey.",
    price: 160,
    image: "https://images.unsplash.com/photo-1610970881699-44a5587cabec?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "smoothie",
  },
  {
    id: 14,
    name: "Green Detox Smoothie",
    description: "Spinach, kale, banana, and pineapple health blend.",
    price: 165,
    image: "https://images.unsplash.com/photo-1638439430466-b2bb7fdc1d67?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "smoothie",
  },
  {
    id: 15,
    name: "Banana Peanut Butter Smoothie",
    description: "Creamy blend of bananas, peanut butter, and Greek yogurt.",
    price: 160,
    image: "https://images.unsplash.com/photo-1626222337147-1ae3a3bc2c18?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "smoothie",
  },
  // New
  {
    id: 26,
    name: "Pineapple Coconut Smoothie",
    description: "Pineapple and coconut blended with yogurt and ice.",
    price: 155,
    image: "https://images.unsplash.com/photo-1502741338009-cac2772e18bc?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "smoothie",
  },
  {
    id: 27,
    name: "Avocado Smoothie",
    description: "Creamy avocado blended with milk and honey.",
    price: 170,
    image: "https://images.unsplash.com/photo-1504674900247-ec6b0b1b798e?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "smoothie",
  },
  {
    id: 28,
    name: "Peach Mango Smoothie",
    description: "Juicy peaches and mangoes blended with yogurt.",
    price: 160,
    image: "https://images.unsplash.com/photo-1465101046530-73398c7f28ca?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "smoothie",
  },
  {
    id: 29,
    name: "Chocolate Banana Smoothie",
    description: "Banana and chocolate blended with milk and ice.",
    price: 165,
    image: "https://images.unsplash.com/photo-1502741338009-cac2772e18bc?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "smoothie",
  },
  {
    id: 30,
    name: "Blueberry Yogurt Smoothie",
    description: "Blueberries blended with yogurt and honey.",
    price: 160,
    image: "https://images.unsplash.com/photo-1465101046530-73398c7f28ca?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&h=300&q=80",
    category: "smoothie",
  },
]
